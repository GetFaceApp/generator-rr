<template name="redux:action" value="/**&#10; * $actionComment$&#10; */&#10;&#10;export const $action$ = &quot;$action$&quot;&#10;&#10;export function $actionMethodName$() {&#10;    doSomething()&#10;    &#10;    return {type: $action$}&#10;}&#10;&#10;$END$" toReformat="false" toShortenFQNames="true">
    <variable name="actionComment" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="action" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="actionMethodName" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
        <option name="JAVA_SCRIPT" value="true" />
        <option name="JS_EXPRESSION" value="true" />
        <option name="JSX_HTML" value="true" />
        <option name="JS_STATEMENT" value="true" />
    </context>
</template>
<template name="redux:asyncActions" value="/**&#10; * $actionComment$&#10; */&#10;&#10;export const $actionPerfix$_START = &quot;$actionPerfix$_START&quot;&#10;export const $actionPerfix$_SUCCESS = &quot;$actionPerfix$_SUCCESS&quot;&#10;export const $actionPerfix$_ERROR = &quot;$actionPerfix$_ERROR&quot;&#10;&#10;export function $actionAsyncMethodName$Start() {&#10;    return {type: $actionPerfix$_START}&#10;}&#10;&#10;export function $actionAsyncMethodName$Success() {&#10;    return {type: $actionPerfix$_SUCCESS}&#10;}&#10;&#10;export function $actionAsyncMethodName$Error(error) {&#10;    return {type: $actionPerfix$_ERROR, error}&#10;}&#10;&#10;export function $actionAsyncMethodName$() {&#10;    return dispatch =&gt; {&#10;        dispatch($actionAsyncMethodName$Start())&#10;&#10;        doSomething(function () {&#10;            dispatch($actionAsyncMethodName$Success())&#10;        }, function (error) {&#10;            dispatch($actionAsyncMethodName$Error(error))&#10;        })&#10;    }&#10;}&#10;&#10;$END$" toReformat="false" toShortenFQNames="true">
<variable name="actionComment" expression="" defaultValue="" alwaysStopAt="true" />
<variable name="actionPerfix" expression="" defaultValue="" alwaysStopAt="true" />
<variable name="actionAsyncMethodName" expression="" defaultValue="" alwaysStopAt="true" />
<context>
    <option name="JAVA_SCRIPT" value="true" />
    <option name="JS_EXPRESSION" value="true" />
    <option name="JSX_HTML" value="true" />
    <option name="JS_STATEMENT" value="true" />
</context>
</template>
<template name="redux:reducerCase" value="// $actionComment$&#10;[$action$](state, action) {&#10;    return state$END$&#10;},&#10;" toReformat="false" toShortenFQNames="true">
<variable name="actionComment" expression="" defaultValue="" alwaysStopAt="true" />
<variable name="action" expression="" defaultValue="" alwaysStopAt="true" />
<context>
    <option name="JAVA_SCRIPT" value="true" />
    <option name="JS_EXPRESSION" value="true" />
    <option name="JSX_HTML" value="true" />
    <option name="JS_STATEMENT" value="true" />
</context>
</template>
<template name="redux:reducerAsyncCases" value="// $actionComment$&#10;[$actionPerfix$_START](state, action) {&#10;    return state&#10;},&#10;[$actionPerfix$_SUCCESS](state, action) {&#10;    return state$END$&#10;},&#10;[$actionPerfix$_ERROR](state, action) {&#10;    return state&#10;},&#10;" toReformat="false" toShortenFQNames="true">
<variable name="actionComment" expression="" defaultValue="" alwaysStopAt="true" />
<variable name="actionPerfix" expression="" defaultValue="" alwaysStopAt="true" />
<context>
    <option name="JAVA_SCRIPT" value="true" />
    <option name="JS_EXPRESSION" value="true" />
    <option name="JSX_HTML" value="true" />
    <option name="JS_STATEMENT" value="true" />
</context>
</template>